# -*- coding: utf-8 -*-
"""Tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G4gPLIfJtdbtWJm2eT-DNrquKwQgkO-k
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.layers.experimental import preprocessing

r_data = pd.read_csv("/content/drive/MyDrive/Team Project/vent_data_for_model.csv")
raw_data = r_data.to_numpy()
data = raw_data[:,2:-3].astype('float32')/10
labels = raw_data[:,-3:].astype('float32')
label = np.empty(len(labels), dtype='float32')
for i in range(0, len(labels)):
  for j in range(0, len(labels[i])):
    if labels[i][j] == 1:
      label[i] = j
print ("Data length: ", len(data))
X_train = data[:2000,]
X_test = data[2000:,]
y_train = label[:2000,]
y_test = label[2000:,]

model = tf.keras.Sequential([layers.Dense(512, activation='relu'), layers.Dense(256, activation='relu'), layers.Dense(128, activation='relu'), layers.Dense(64, activation='relu'), layers.Dense(3)])
model.compile(loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer = keras.optimizers.Adam(lr=0.001), metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=32, epochs=20, verbose=1)

loss, acc = model.evaluate(X_test, y_test, verbose=1)
print("Vent model, accuracy: {:5.2f}%".format(100 * acc))

normalize = preprocessing.Normalization()
normalize.adapt(X_train)
norm_model = tf.keras.Sequential([normalize, layers.Dense(512, activation='relu'), layers.Dense(256, activation='relu'), layers.Dense(128, activation='relu'), layers.Dense(64, activation='relu'), layers.Dense(3)])
norm_model.compile(loss = keras.losses.SparseCategoricalCrossentropy(from_logits=True), optimizer = keras.optimizers.Adam(lr=0.001), metrics=['accuracy'])
norm_model.fit(X_train, y_train, epochs=20, verbose=1)

norm_oss, norm_acc = norm_model.evaluate(X_test, y_test, verbose=1)
print("Vent model, accuracy: {:5.2f}%".format(100 * norm_acc))

model.save('vent-model')
